(use-modules (ice-9 match)
             (ice-9 futures)
             (srfi srfi-1))

(define 0-9 (iota 10))

(define symbols '(s e n d m o r y))

(define (verify-3 l)
  (match l
    ((y r o m d n e s)
     (if (and (not (= s 0)) (not (= m 0)))
         (let M ((q `((,d ,e ,y) (,n ,r ,e) (,e ,o ,n)
                      (,s ,m ,o) (0 0 ,m)))
                 (a 0))
           (if (null? q)
               (begin
                 (format #t "match found: ~a\n" (reverse l))
                 #t)
               (let* ((h (car q)) (t (cdr q))
                      (aba (+ a (car h) (cadr h)))
                      (abb (quotient aba 10))
                      (abc (remainder aba 10))
                      (abd (caddr h)))
                 (if (= abc abd)
                     (M t abb)
                     #f))))))))

(define (perm-4 l a f c)
  (if (zero? c)
      (f a)
      (let M ((left '()) (right l))
        (if (null? right)
            '()
            (let ((h (car right)) (t (cdr right)))
              (perm-4 (append left t) (cons h a) f (1- c))
              (M (cons h left) t))))))

(define (perm-4-b l a f c)
  (if (zero? c)
      (f a)
      (let M ((left '()) (right l) (ft '()))
        (if (null? right)
            (for-each touch ft)
            (let ((h (car right)) (t (cdr right)))
              (M (cons h left) t
                 (cons (future (perm-4 (append left t) (cons h a)
                                         f (1- c))) ft)))))))

(perm-4-b 0-9 '() verify-3 8)
